% Generated by IEEEtran.bst, version: 1.14 (2015/08/26)
\begin{thebibliography}{10}
\providecommand{\url}[1]{#1}
\csname url@samestyle\endcsname
\providecommand{\newblock}{\relax}
\providecommand{\bibinfo}[2]{#2}
\providecommand{\BIBentrySTDinterwordspacing}{\spaceskip=0pt\relax}
\providecommand{\BIBentryALTinterwordstretchfactor}{4}
\providecommand{\BIBentryALTinterwordspacing}{\spaceskip=\fontdimen2\font plus
\BIBentryALTinterwordstretchfactor\fontdimen3\font minus \fontdimen4\font\relax}
\providecommand{\BIBforeignlanguage}[2]{{%
\expandafter\ifx\csname l@#1\endcsname\relax
\typeout{** WARNING: IEEEtran.bst: No hyphenation pattern has been}%
\typeout{** loaded for the language `#1'. Using the pattern for}%
\typeout{** the default language instead.}%
\else
\language=\csname l@#1\endcsname
\fi
#2}}
\providecommand{\BIBdecl}{\relax}
\BIBdecl

\bibitem{yi2017feasibility}
J.~Yi, U.~Z. Ahmed, A.~Karkare, S.~H. Tan, and A.~Roychoudhury, ``A feasibility study of using automated program repair for introductory programming assignments,'' in \emph{Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering}, 2017, pp. 740--751.

\bibitem{le2011genprog}
C.~Le~Goues, T.~Nguyen, S.~Forrest, and W.~Weimer, ``Genprog: A generic method for automatic software repair,'' \emph{Ieee transactions on software engineering}, vol.~38, no.~1, pp. 54--72, 2011.

\bibitem{weimer2013leveraging}
W.~Weimer, Z.~P. Fry, and S.~Forrest, ``Leveraging program equivalence for adaptive program repair: Models and first results,'' in \emph{2013 28th IEEE/ACM International Conference on Automated Software Engineering (ASE)}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE, 2013, pp. 356--366.

\bibitem{mechtaev2016angelix}
S.~Mechtaev, J.~Yi, and A.~Roychoudhury, ``Angelix: Scalable multiline program patch synthesis via symbolic analysis,'' in \emph{Proceedings of the 38th international conference on software engineering}, 2016, pp. 691--701.

\bibitem{long2016automatic}
F.~Long and M.~Rinard, ``Automatic patch generation by learning correct code,'' in \emph{Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages}, 2016, pp. 298--312.

\bibitem{hu2019re}
Y.~Hu, U.~Z. Ahmed, S.~Mechtaev, B.~Leong, and A.~Roychoudhury, ``Re-factoring based program repair applied to programming assignments,'' in \emph{2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE)}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE, 2019, pp. 388--398.

\bibitem{wang2018search}
K.~Wang, R.~Singh, and Z.~Su, ``Search, align, and repair: data-driven feedback generation for introductory programming exercises,'' in \emph{Proceedings of the 39th ACM SIGPLAN conference on programming language design and implementation}, 2018, pp. 481--495.

\bibitem{gulwani2018automated}
S.~Gulwani, I.~Radi{\v{c}}ek, and F.~Zuleger, ``Automated clustering and program repair for introductory programming assignments,'' \emph{ACM SIGPLAN Notices}, vol.~53, no.~4, pp. 465--480, 2018.

\bibitem{li2022generating}
L.~Li, H.~Liu, K.~Li, Y.~Jiang, and R.~Sun, ``Generating concise patches for newly released programming assignments,'' \emph{IEEE Transactions on Software Engineering}, vol.~49, no.~1, pp. 450--467, 2022.

\bibitem{pu2016sk_p}
Y.~Pu, K.~Narasimhan, A.~Solar-Lezama, and R.~Barzilay, ``sk\_p: a neural program corrector for moocs,'' in \emph{Companion Proceedings of the 2016 ACM SIGPLAN International Conference on Systems, Programming, Languages and Applications: Software for Humanity}, 2016, pp. 39--40.

\bibitem{heo2023referent}
J.~Heo, H.~Jeong, D.~Choi, and E.~Lee, ``Referent: Transformer-based feedback generation using assignment information for programming course,'' in \emph{2023 IEEE/ACM 45th International Conference on Software Engineering: Software Engineering Education and Training (ICSE-SEET)}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE, 2023, pp. 101--106.

\bibitem{singh2013automated}
R.~Singh, S.~Gulwani, and A.~Solar-Lezama, ``Automated feedback generation for introductory programming assignments,'' in \emph{Proceedings of the 34th ACM SIGPLAN conference on Programming language design and implementation}, 2013, pp. 15--26.

\bibitem{mechtaev2018semantic}
S.~Mechtaev, M.-D. Nguyen, Y.~Noller, L.~Grunske, and A.~Roychoudhury, ``Semantic program repair using a reference implementation,'' in \emph{Proceedings of the 40th International Conference on Software Engineering}, 2018, pp. 129--139.

\bibitem{ahmed2022verifix}
U.~Z. Ahmed, Z.~Fan, J.~Yi, O.~I. Al-Bataineh, and A.~Roychoudhury, ``Verifix: Verified repair of programming assignments,'' \emph{ACM Transactions on Software Engineering and Methodology (TOSEM)}, vol.~31, no.~4, pp. 1--31, 2022.

\bibitem{d2016qlose}
L.~Dâ€™Antoni, R.~Samanta, and R.~Singh, ``Qlose: Program repair with quantitative objectives,'' in \emph{International Conference on Computer Aided Verification}.\hskip 1em plus 0.5em minus 0.4em\relax Springer, 2016, pp. 383--401.

\bibitem{choi2021automated}
D.~Choi, J.~Heo, and E.~Lee, ``Automated feedback generation for multiple function programs,'' in \emph{2021 28th Asia-Pacific Software Engineering Conference (APSEC)}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE, 2021, pp. 582--583.

\bibitem{song2021context}
D.~Song, W.~Lee, and H.~Oh, ``Context-aware and data-driven feedback generation for programming assignments,'' in \emph{Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering}, 2021, pp. 328--340.

\bibitem{rolim2017learning}
R.~Rolim, G.~Soares, L.~D'Antoni, O.~Polozov, S.~Gulwani, R.~Gheyi, R.~Suzuki, and B.~Hartmann, ``Learning syntactic program transformations from examples,'' in \emph{2017 IEEE/ACM 39th International Conference on Software Engineering (ICSE)}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE, 2017, pp. 404--415.

\bibitem{kaleeswaran2016semi}
S.~Kaleeswaran, A.~Santhiar, A.~Kanade, and S.~Gulwani, ``Semi-supervised verified feedback generation,'' in \emph{Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering}, 2016, pp. 739--750.

\bibitem{liu2019tbar}
K.~Liu, A.~Koyuncu, D.~Kim, and T.~F. Bissyand{\'e}, ``Tbar: Revisiting template-based automated program repair,'' in \emph{Proceedings of the 28th ACM SIGSOFT international symposium on software testing and analysis}, 2019, pp. 31--42.

\bibitem{li2022transrepair}
X.~Li, S.~Liu, R.~Feng, G.~Meng, X.~Xie, K.~Chen, and Y.~Liu, ``Transrepair: Context-aware program repair for compilation errors,'' in \emph{Proceedings of the 37th IEEE/ACM International Conference on Automated Software Engineering}, 2022, pp. 1--13.

\bibitem{zhang2024pydex}
J.~Zhang, J.~P. Cambronero, S.~Gulwani, V.~Le, R.~Piskac, G.~Soares, and G.~Verbruggen, ``Pydex: Repairing bugs in introductory python assignments using llms,'' \emph{Proceedings of the ACM on Programming Languages}, vol.~8, no. OOPSLA1, pp. 1100--1124, 2024.

\bibitem{phung2023generating}
T.~Phung, J.~Cambronero, S.~Gulwani, T.~Kohn, R.~Majumdar, A.~Singla, and G.~Soares, ``Generating high-precision feedback for programming syntax errors using large language models,'' \emph{arXiv preprint arXiv:2302.04662}, 2023.

\bibitem{joshi2023repair}
H.~Joshi, J.~C. Sanchez, S.~Gulwani, V.~Le, G.~Verbruggen, and I.~Radi{\v{c}}ek, ``Repair is nearly generation: Multilingual program repair with llms,'' in \emph{Proceedings of the AAAI Conference on Artificial Intelligence}, vol.~37, no.~4, 2023, pp. 5131--5140.

\bibitem{forrest1993genetic}
S.~Forrest, ``Genetic algorithms: principles of natural selection applied to computation,'' \emph{Science}, vol. 261, no. 5123, pp. 872--878, 1993.

\bibitem{koza1992programming}
J.~Koza, ``On the programming of computers by means of natural selection,'' \emph{Genetic programming}, 1992.

\bibitem{yuan2018arja}
Y.~Yuan and W.~Banzhaf, ``Arja: Automated repair of java programs via multi-objective genetic programming,'' \emph{IEEE Transactions on software engineering}, vol.~46, no.~10, pp. 1040--1067, 2018.

\bibitem{eiben2003genetic}
A.~E. Eiben, J.~E. Smith, A.~Eiben, and J.~Smith, ``Genetic algorithms,'' \emph{Introduction to Evolutionary Computing}, pp. 37--69, 2003.

\bibitem{cao2023code}
H.~Cao, D.~Han, F.~Liu, T.~Liao, C.~Zhao, and J.~Shi, ``Code similarity and location-awareness automatic program repair,'' \emph{Applied Sciences}, vol.~13, no.~14, p. 8519, 2023.

\bibitem{harada2024towards}
K.~Harada and K.~Maruyama, ``Towards efficient program repair with apr tools based on genetic algorithms,'' in \emph{2024 IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE, 2024, pp. 896--901.

\bibitem{silva2023automatic}
M.~Silva-Mu{\~n}oz, C.~Contreras-Bolton, C.~Rey, and V.~Parada, ``Automatic generation of a hybrid algorithm for the maximum independent set problem using genetic programming,'' \emph{Applied Soft Computing}, p. 110474, 2023.

\bibitem{oliveira2016improved}
V.~P.~L. Oliveira, E.~F. Souza, C.~Le~Goues, and C.~G. Camilo-Junior, ``Improved crossover operators for genetic programming for program repair,'' in \emph{Search Based Software Engineering: 8th International Symposium, SSBSE 2016, Raleigh, NC, USA, October 8-10, 2016, Proceedings 8}.\hskip 1em plus 0.5em minus 0.4em\relax Springer, 2016, pp. 112--127.

\bibitem{deb2002fast}
K.~Deb, A.~Pratap, S.~Agarwal, and T.~Meyarivan, ``A fast and elitist multiobjective genetic algorithm: Nsga-ii,'' \emph{IEEE transactions on evolutionary computation}, vol.~6, no.~2, pp. 182--197, 2002.

\bibitem{blank2019investigating}
J.~Blank, K.~Deb, and P.~C. Roy, ``Investigating the normalization procedure of nsga-iii,'' in \emph{International Conference on Evolutionary Multi-Criterion Optimization}.\hskip 1em plus 0.5em minus 0.4em\relax Springer, 2019, pp. 229--240.

\bibitem{abreu2009spectrum}
R.~Abreu, P.~Zoeteweij, and A.~J. Van~Gemund, ``Spectrum-based multiple fault localization,'' in \emph{2009 IEEE/ACM International Conference on Automated Software Engineering}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE, 2009, pp. 88--99.

\bibitem{jones2001visualization}
J.~A. Jones, M.~J. Harrold, and J.~T. Stasko, ``Visualization for fault localization,'' in \emph{in Proceedings of ICSE 2001 Workshop on Software Visualization}.\hskip 1em plus 0.5em minus 0.4em\relax Citeseer, 2001.

\bibitem{abreu2006evaluation}
R.~Abreu, P.~Zoeteweij, and A.~J. Van~Gemund, ``An evaluation of similarity coefficients for software fault localization,'' in \emph{2006 12th Pacific Rim International Symposium on Dependable Computing (PRDC'06)}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE, 2006, pp. 39--46.

\bibitem{li2023vsusfl}
Z.~Li, S.~Wu, Y.~Liu, J.~Shen, Y.~Wu, Z.~Zhang, and X.~Chen, ``Vsusfl: Variable-suspiciousness-based fault localization for novice programs,'' \emph{Journal of Systems and Software}, vol. 205, p. 111822, 2023.

\bibitem{eiben2015introduction}
A.~E. Eiben and J.~E. Smith, \emph{Introduction to evolutionary computing}.\hskip 1em plus 0.5em minus 0.4em\relax Springer, 2015.

\bibitem{codeforcesCodeforces}
CodeForces, ``{C}odeforces --- codeforces.com,'' \url{https://codeforces.com}.

\bibitem{ExperimentTask}
H.~L. Leping~Li, K.~L, and R.~S. Yanjie~J, ``Dastaset of {A}ssignment{M}ender,'' \url{https://github.com/CoPaGe/FeedbackExperimentTask}, 2022.

\bibitem{brown2020language}
T.~B. Brown, ``Language models are few-shot learners,'' \emph{arXiv preprint arXiv:2005.14165}, 2020.

\bibitem{pylintPylintCode}
Logilab, ``{P}ylint - code analysis for {P}ython | www.pylint.org --- pylint.org,'' \url{https://www.pylint.org}.

\bibitem{siddiq2024quality}
M.~L. Siddiq, L.~Roney, J.~Zhang, and J.~C. D.~S. Santos, ``Quality assessment of chatgpt generated code and their use by developers,'' in \emph{Proceedings of the 21st International Conference on Mining Software Repositories}, 2024, pp. 152--156.

\bibitem{horschig2018java}
S.~Horschig, T.~Mattis, and R.~Hirschfeld, ``Do java programmers write better python? studying off-language code quality on github,'' in \emph{Companion Proceedings of the 2nd International Conference on the Art, Science, and Engineering of Programming}, 2018, pp. 127--134.

\bibitem{apostolidis2023evaluation}
G.~D. Apostolidis, ``Evaluation of python code quality using multiple source code analyzers,'' 2023.

\bibitem{agarwal2020quality}
M.~Agarwal, K.~Talamadupula, S.~Houde, F.~Martinez, M.~Muller, J.~Richards, S.~Ross, and J.~D. Weisz, ``Quality estimation \& interpretability for code translation,'' \emph{arXiv preprint arXiv:2012.07581}, 2020.

\end{thebibliography}
